// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruckPlanAnalytics.Data.Context;

#nullable disable

namespace TruckPlanAnalytics.Data.Migrations
{
    [DbContext(typeof(TruckPlanDbContext))]
    partial class TruckPlanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.DistancePerCountry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountryCode")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<Guid>("TruckPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("TruckPlanId");

                    b.ToTable("DistancesPerCountry");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.Driver", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.GpsCoordinate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("TruckPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("TruckPlanId");

                    b.ToTable("GpsCoordinates");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.Truck", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TruckModel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.TruckPlan", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("DriverId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckPlans");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.DistancePerCountry", b =>
                {
                    b.HasOne("TruckPlanAnalytics.Core.Models.TruckPlan", "TruckPlan")
                        .WithMany("DistancesPerCountry")
                        .HasForeignKey("TruckPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckPlan");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.GpsCoordinate", b =>
                {
                    b.HasOne("TruckPlanAnalytics.Core.Models.TruckPlan", "TruckPlan")
                        .WithMany("GpsCoordinates")
                        .HasForeignKey("TruckPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TruckPlan");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.Truck", b =>
                {
                    b.HasOne("TruckPlanAnalytics.Core.Models.Driver", null)
                        .WithMany("Trucks")
                        .HasForeignKey("DriverID");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.TruckPlan", b =>
                {
                    b.HasOne("TruckPlanAnalytics.Core.Models.Driver", "Driver")
                        .WithMany("TruckPlans")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckPlanAnalytics.Core.Models.Truck", "Truck")
                        .WithMany("TruckPlans")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.Driver", b =>
                {
                    b.Navigation("TruckPlans");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.Truck", b =>
                {
                    b.Navigation("TruckPlans");
                });

            modelBuilder.Entity("TruckPlanAnalytics.Core.Models.TruckPlan", b =>
                {
                    b.Navigation("DistancesPerCountry");

                    b.Navigation("GpsCoordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
